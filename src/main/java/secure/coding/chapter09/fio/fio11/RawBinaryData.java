package secure.coding.chapter09.fio.fio11;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;

/**
 * @rule FIO11-J. Do not attempt to read raw binary data as character data
 * 
 * @description In Java, byte arrays are often used to transmit raw binary data
 *              as well as character-encoded data. Attempts to read raw binary
 *              data as if it were character-encoded data often fail because
 *              some of the bytes fall outside the default or specified encoding
 *              scheme and for that reason fail to denote valid characters. For
 *              example, converting a cryptographic key containing
 *              nonrepresentable bytes to character-encoded data for
 *              transmission may result in an error.
 */
public final class RawBinaryData {
	/**
	 * @category Noncompliant code
	 *
	 * @description This noncompliant code example attempts to convert the byte
	 *              array representing a BigInteger into a String. Because some of
	 *              the bytes do not denote valid characters, the resulting String
	 *              representation loses information. Converting the String back to
	 *              a BigInteger produces a different value.
	 * 
	 *              When this program was run on a Linux platform where the default
	 *              character encoding is US-ASCII, the string s got the value
	 *              {?J??, because some of the characters were unprintable. When
	 *              converted back to a BigInteger, x got the value
	 *              149830058370101340468658109.
	 */
	public static void example1() {
		BigInteger x = new BigInteger("530500452766");
		// convert x to a String
		byte[] byteArray = x.toByteArray();
		String s = new String(byteArray);
		System.out.println(s);
		// convert s back to a BigInteger
		byteArray = s.getBytes();
		x = new BigInteger(byteArray);
		System.out.println(x);
	}

	/**
	 * @category Compliant solution
	 *
	 * @description This compliant solution first produces a String representation
	 *              of the BigInteger object and then converts the String object to
	 *              a byte array. This process is reversed on input. Because the
	 *              textual representation in the String object was generated by the
	 *              BigInteger class, it contains valid characters.
	 */
	public static void example2() throws IOException {
		BigInteger x = new BigInteger("530500452766");
		String s = x.toString(); // valid character data
		try {
			byte[] byteArray = s.getBytes("UTF8");
			// ns prints as "530500452766"
			String ns = new String(byteArray, "UTF8");
			System.out.println(ns);
			// construct the original BigInteger
			BigInteger x1 = new BigInteger(ns);
			System.out.println(x1);
		} catch (UnsupportedEncodingException ex) {
			// handle error
		}
	}
	
	public static void main(String[] args) throws IOException {
		example1();
		example2();
	}
}
