package secure.coding.chapter07.ser.ser05;

import java.io.Serializable;

/**
 * @rule SER05-J. Do not serialize instances of inner classes
 * 
 * 
 * @description “An inner class is a nested class that is not explicitly or
 *              implicitly declared static” [ JLS 2005]. Serialization of inner
 *              classes (including local and anonymous classes) is error prone.
 * 
 *              - Serializing an inner class declared in a non-static context
 *              that contains implicit non-transient references to enclosing
 *              class instances results in serialization of its associated outer
 *              class instance.
 * 
 *              - Synthetic fields generated by Java compilers to implement
 *              inner classes are implementation dependent and may vary between
 *              compilers; differences in such fields can disrupt compatibility
 *              as well as result in conflicting default serialVersionUID
 *              values. The names assigned to local and anonymous inner classes
 *              are also implementation dependent and may differ between
 *              compilers.
 * 
 *              - Because inner classes cannot declare static members other than
 *              compile-time constant fields, they cannot use the
 *              serialPersistentFields mechanism to designate serializable
 *              fields.
 * 
 *              - Because inner classes associated with outer instances do not
 *              have zero-argument constructors (constructors of such inner
 *              classes implicitly accept the enclosing instance as a prepended
 *              parameter), they cannot implement Externalizable. The
 *              Externalizable interface requires the implementing object to
 *              manually save and restore its state using the writeExternal()
 *              and readExternal() methods.
 * 
 *              Because none of these issues apply to static member classes,
 *              serialization of static member classes is permitted.
 */
public class OuterSer implements Serializable {
	private int rank;

	/**
	 * @category Noncompliant code
	 */
	class InnerSer1 implements Serializable {
		protected String name;
		// . ..
	}
	
	/**
	 * @category Compliant solution
	 */
	class InnerSer2 {
		protected String name;
		// . ..
	}
	
	/**
	 * @category Compliant solution
	 */
	static class InnerSer3 implements Serializable {
		protected String name;
		// . ..
	}
}
